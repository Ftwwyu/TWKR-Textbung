
;실제로 캐릭터를 이동시키는 함수
@TB_캐릭이동(캐릭터,이동값)
#DIM DYNAMIC 캐릭터
#DIM DYNAMIC 이동값

T_위치:캐릭터:0 += 이동값
IF T_위치:캐릭터:0 >= TB_위치값한계
    이동값 -= T_위치:캐릭터:0 - TB_위치값한계
    T_위치:캐릭터:0 = TB_위치값한계
ELSEIF T_위치:캐릭터:0 <= 0
    이동값 += 0 - T_위치:캐릭터:0
    T_위치:캐릭터:0 = 0
ENDIF
RETURN 이동값

;특정 좌표로 순간 이동 시킴
@TB_순간이동(캐릭터,좌표)
#DIM DYNAMIC 캐릭터
#DIM DYNAMIC 좌표

T_위치:캐릭터:0 = 좌표
IF T_위치:캐릭터:0 >= TB_위치값한계
    좌표 -= T_위치:캐릭터:0 - TB_위치값한계
    T_위치:캐릭터:0 = TB_위치값한계
ELSEIF T_위치:캐릭터:0 <= 0
    좌표 += 0 - T_위치:캐릭터:0
    T_위치:캐릭터:0 = 0
ENDIF
RETURN 좌표

;대상간의 거리, 혹은 대상과 지점간의 거리를 측정
@TB_거리(대상 = 0,좌표 = 0)
#FUNCTION
#DIM DYNAMIC 대상
#DIM DYNAMIC 좌표

IF 대상 && 좌표
    RETURNF ABS(T_위치:대상:0 - 좌표)
ELSE
    RETURNF ABS(T_위치:T_대상1:0 - T_위치:T_대상2:0)
ENDIF


;이동력을 바탕으로 이동거리를 계산해서 이동함
@T_MOVE(캐릭터,방향,거리 = 0,제한 = 0)
#DIM DYNAMIC 캐릭터
#DIM DYNAMIC 방향
#DIM DYNAMIC 거리
CALL 행동기회소모(캐릭터,T_이동행동)
IF !거리
    거리 = ARG능력치(캐릭터,"이동력")
ENDIF
IF 제한 == 1
    거리 /= 2
ENDIF
IF 방향 == 1
    CALL TB_캐릭이동(캐릭터,MIN(방향*ARG능력치(캐릭터,"이동력"), 방향*거리))
    PRINTFORML %조사처리(CALLNAME:캐릭터,"가")% 오른쪽으로 {RESULT}m움직였다!
ELSE
    CALL TB_캐릭이동(캐릭터,MAX(방향*ARG능력치(캐릭터,"이동력"), 방향*거리))
    PRINTFORML %조사처리(CALLNAME:캐릭터,"가")% 왼쪽으로 {ABS(RESULT)}m움직였다!
ENDIF

;혹여 이상하게 건드렸다가 값 꼬이지 않게 + 코드가 단정해짐
@TB_위치(ARG)
#FUNCTION
RETURNF T_위치:ARG:0

;ARG의 입장에서 ARG:1의 방향
@TB_방향(ARG,ARG:1)
#FUNCTION
IF ARG == 0 && ARG:1 == 0
    ARG = T_시전자
    ARG:1 = T_시전자반대
ENDIF
IF ARG < ARG:1
    RETURNF 1
ELSEIF ARG == ARG:1
    RETURNF 1
ELSEIF ARG > ARG:1
    RETURNF -1
ENDIF


@TB_돌진(시전자,대상자,이격,최대거리)
#DIM DYNAMIC 시전자
#DIM DYNAMIC 대상자
#DIM DYNAMIC 이격
#DIM DYNAMIC 최대거리
#DIM DYNAMIC 거리
#DIM DYNAMIC 최종거리

거리 = TB_위치(시전자) + (TB_거리() * TB_방향(TB_위치(시전자),TB_위치(대상자)))
이격 = 이격 * TB_방향(TB_위치(시전자),TB_위치(대상자))

최종거리 = (거리 + 이격)
IF ABS(최종거리) > 최대거리
    최종거리 = TB_위치(시전자) + (TB_방향(TB_위치(시전자),TB_위치(대상자)) * 최대거리)
ENDIF


CALL TB_순간이동(시전자, 최종거리)


@T_MOVEABLE(시전자)
#FUNCTION
#DIM DYNAMIC 시전자
IF TB_SUM_REMAIN(시전자,TCV_속박)
    RETURNF 0
ENDIF
RETURNF 1


@T_TPABLE(시전자)
#FUNCTION
#DIM DYNAMIC 시전자
IF TB_SUM_REMAIN(시전자,TCV_봉쇄)
    RETURNF 0
ENDIF
RETURNF 1
